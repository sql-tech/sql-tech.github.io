# 導航項目

nav_home: 首頁 nav_installation: 資料庫安裝說明書 nav_normalization: 資料庫正規化說明書 nav_performance: 資料庫效能提升標準作業流程 nav_basic_query: 基礎查詢 nav_select: SELECT nav_distinct: DISTINCT nav_where: WHERE nav_and_or: AND OR nav_in: IN nav_between: BETWEEN nav_wildcard: 萬用字元 nav_like: LIKE nav_order_by: ORDER BY nav_function: 函數 nav_avg: 平均值 nav_count: COUNT nav_max: 最大值 nav_min: 最小值 nav_sum: 總合 nav_group_by: GROUP BY nav_having: HAVING nav_alias: 別名 nav_as: AS nav_join: 表格連接 nav_outer_join: 外部連接 nav_concatenate: CONCATENATE nav_substring: SUBSTRING nav_trim: TRIM nav_length: 長度 nav_replace: REPLACE nav_data_definition: 資料定義 nav_create_table: CREATE TABLE nav_constraint: Constraint nav_primary_key: 主鍵 nav_foreign_key: 外來鍵 nav_create_view: CREATE VIEW nav_create_index: CREATE INDEX nav_alter_table: ALTER TABLE nav_add_column: 添加欄位 nav_modify_column: 更改欄位 nav_alter_column: 調整欄位 nav_rename_column: 改名欄位 nav_drop_column: 刪除欄位 nav_add_index: 添加索引 nav_drop_index: 刪除索引 nav_add_constraint: 添加限制 nav_drop_constraint: 刪除限制 nav_drop_table: DROP TABLE nav_truncate_table: TRUNCATE TABLE nav_use: USE nav_insert_into: INSERT INTO nav_update: UPDATE nav_delete_from: DELETE FROM nav_advanced_sql: 進階 SQL nav_union: UNION nav_union_all: UNION ALL nav_nested_view: 內嵌視觀表 nav_intersect: INTERSECT nav_minus: MINUS nav_limit: LIMIT nav_subquery: 子查詢 nav_with: WITH nav_exists: EXISTS nav_case: CASE nav_window_function: 窗口函數 nav_sequence: SEQUENCE 和 NEXTVAL nav_rank: 算排名 nav_median: 算中位數 nav_cumulative_sum: 算累積總計 nav_sum_percent: 算總合百分比 nav_cumulative_sum_percent: 算累積總合百分比

===

# Footer 內容

footer_content: 最後編輯時間：2025年4月9日 | 聯絡信箱：123goyellowbook@gmail.com | © 2025 SQL資料庫百科全書。保留所有權利。

===

# 首頁內容

home_title: 歡迎來到 SQL資料庫百科全書 home_content: 「SQL資料庫百科全書」提供基礎、資料定義、進階 SQL 指令教學，包含一般、MySQL、Oracle範例，搭配表格和表結構圖，適合初學者與專業人士。我們還提供MySQL和Oracle在Windows、Linux、MacOS的安裝指南，步驟詳細，點擊左側目錄，立即開啟您的SQL學習之旅！無論是資料庫新手還是資深開發者，這裡都有您需要的知識與實務指引。

===

# 安裝說明書

installation_title: 資料庫安裝說明書 installation_intro: 本節提供MySQL和Oracle在Windows、Linux、MacOS的安裝指南，包含步驟、模擬截圖、參數表格和注意事項，幫助您配置資料庫環境。

# MySQL Windows

mysql_windows_title: MySQL 安裝 - Windows mysql_windows_intro: 在Windows 10/11安裝MySQL 8.0，適用64位系統。 mysql_windows_steps:

1. **下載**：訪問MySQL官網，選Windows版本（\~400MB）。

```
--------------------
| Download MySQL 8.0 |
| [Windows x64]     |
| [Download Button] |
--------------------
```

2. **運行**：雙擊`mysql-installer-web-community-8.0.x.msi`，選「Developer Default」，點Next。

```
--------------------
| Setup Type       |
| [x] Developer    |
| [Next Button]    |
--------------------
```

3. **依賴項**：檢查環境（如.NET Framework），點「Execute」安裝缺少項目。
4. **配置**：選「Standalone」，埠3306，點Next。

```
--------------------
| Port: [3306]     |
| [Standalone]     |
| [Next Button]    |
--------------------
```

5. **密碼**：設根用戶密碼（如「MySQL2025!」），點Next。
6. **安裝**：點「Execute」，完成後勾選「Start MySQL」，點Finish。
7. **驗證**：命令提示字元輸入`mysql -u root -p`，檢查`mysql>`提示符。 mysql_windows_code:

```sql
mysql> SHOW DATABASES;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
+--------------------+
```

mysql_windows_params:

| 參數 | 值 |
| --- | --- |
| 版本 | MySQL 8.0 |
| 路徑 | C:\\Program Files\\MySQL |
| 埠 | 3306 |
| 用戶 | root |
| mysql_windows_notes: |  |

- 需2GB空間。
- 防火牆允許3306埠。
- 忘記密碼用`mysqld --skip-grant-tables`重設。 mysql_windows_structure:

```
mysql.user
+------------+---------+
| user       | VARCHAR |
| host       | VARCHAR |
| password   | VARCHAR |
+------------+---------+
```

# MySQL Linux

mysql_linux_title: MySQL 安裝 - Linux mysql_linux_intro: 在Ubuntu 22.04安裝MySQL 8.0，適用Linux發行版。 mysql_linux_steps:

1. **更新**：`sudo apt update && sudo apt upgrade`

```
--------------------
| $ sudo apt update |
| [Progress Bar]    |
| Hit:1 http://...  |
--------------------
```

2. **安裝**：`sudo apt install mysql-server`
3. **啟動**：`sudo systemctl start mysql && sudo systemctl enable mysql`
4. **安全**：`sudo mysql_secure_installation`，設密碼，移除不安全選項。

```
--------------------
| Root password     |
| [Input Field]     |
| [Y/n] Remove...?  |
--------------------
```

5. **驗證**：`mysql -u root -p`，檢查資料庫。 mysql_linux_code:

```sql
mysql> SHOW DATABASES;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
+--------------------+
```

mysql_linux_params:

| 參數 | 值 |
| --- | --- |
| 版本 | MySQL 8.0 |
| 路徑 | /var/lib/mysql |
| 埠 | 3306 |
| 服務 | mysql |
| mysql_linux_notes: |  |

- 需root權限。
- 檢查`/etc/mysql`配置。
- 允許3306埠。 mysql_linux_structure:

```
mysql.user
+------------+---------+
| user       | VARCHAR |
| host       | VARCHAR |
| password   | VARCHAR |
+------------+---------+
```

# MySQL MacOS

mysql_macos_title: MySQL 安裝 - MacOS mysql_macos_intro: 在MacOS Ventura 13安裝MySQL 8.0，使用Homebrew。 mysql_macos_steps:

1. **Homebrew**：`/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"`

```
--------------------
| $ curl -fsSL ...  |
| [Installing]      |
| ==> Success       |
--------------------
```

2. **安裝**：`brew install mysql`
3. **啟動**：`brew services start mysql`
4. **密碼**：`mysql_secure_installation`

```
--------------------
| Set password?     |
| [Y/n] [Input]     |
| [Continue]        |
--------------------
```

5. **驗證**：`mysql -u root -p`mysql_macos_code:

```sql
mysql> SHOW DATABASES;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
+--------------------+
```

mysql_macos_params:

| 參數 | 值 |
| --- | --- |
| 版本 | MySQL 8.0 |
| 路徑 | /usr/local/Cellar/mysql |
| 埠 | 3306 |
| 服務 | mysql |
| mysql_macos_notes: |  |

- 更新Homebrew。
- 檢查`/usr/local/etc/my.cnf`。 mysql_macos_structure:

```
mysql.user
+------------+---------+
| user       | VARCHAR |
| host       | VARCHAR |
| password   | VARCHAR |
+------------+---------+
```

# Oracle Windows

oracle_windows_title: Oracle 安裝 - Windows oracle_windows_intro: 在Windows 10/11安裝Oracle 21c XE。 oracle_windows_steps:

1. **下載**：訪問Oracle官網，選21c XE（\~2GB）。

```
--------------------
| Oracle 21c XE     |
| [Windows x64]     |
| [Download Button] |
--------------------
```

2. **解壓**：解壓`oracle-database-xe-21c.zip`至C:\\oracle。
3. **運行**：雙擊`setup.exe`，選路徑C:\\app\\oracle，點Next。

```
--------------------
| Destination       |
| [C:\app\oracle]   |
| [Next Button]     |
--------------------
```

4. **密碼**：為SYS/SYSTEM設密碼（如「Oracle2025!」），點Next。
5. **安裝**：點Install，約15分鐘，自動啟動。
6. **驗證**：`sqlplus / as sysdba`oracle_windows_code:

```sql
SQL> SELECT * FROM v$version;
BANNER
Oracle Database 21c Express Edition
```

oracle_windows_params:

| 參數 | 值 |
| --- | --- |
| 版本 | Oracle 21c XE |
| 路徑 | C:\\app\\oracle |
| 埠 | 1521 |
| 服務 | XE |
| oracle_windows_notes: |  |

- 需10GB空間。
- 關閉防毒軟體。
- 檢查TNS監聽器（`lsnrctl status`）。 oracle_windows_structure:

```
dba_users
+------------+---------+
| username   | VARCHAR |
| user_id    | NUMBER  |
| created    | DATE    |
+------------+---------+
```

# Oracle Linux

oracle_linux_title: Oracle 安裝 - Linux oracle_linux_intro: 在Oracle Linux 8安裝Oracle 21c XE，透過RPM。 oracle_linux_steps:

1. **下載**：下載`oracle-database-xe-21c-1.0-1.x86_64.rpm`。

```
--------------------
| Oracle 21c RPM    |
| [Linux x64]       |
| [Download Button] |
--------------------
```

2. **依賴**：`sudo dnf install -y oracle-database-preinstall-21c`
3. **安裝**：`sudo rpm -ivh oracle-database-xe-21c-1.0-1.x86_64.rpm`
4. **配置**：`sudo /etc/init.d/oracle-xe-21c configure`

```
--------------------
| SYS password      |
| [Input Field]     |
| [Continue]        |
--------------------
```

5. **驗證**：`sqlplus / as sysdba`oracle_linux_code:

```sql
SQL> SELECT * FROM v$version;
BANNER
Oracle Database 21c Express Edition
```

oracle_linux_params:

| 參數 | 值 |
| --- | --- |
| 版本 | Oracle 21c XE |
| 路徑 | /opt/oracle |
| 埠 | 1521 |
| 服務 | XE |
| oracle_linux_notes: |  |

- 需root權限。
- 12GB空間。
- 設`ORACLE_HOME=/opt/oracle/product/21c/dbhomeXE`。 oracle_linux_structure:

```
dba_users
+------------+---------+
| username   | VARCHAR |
| user_id    | NUMBER  |
| created    | DATE    |
+------------+---------+
```

# Oracle MacOS

oracle_macos_title: Oracle 安裝 - MacOS oracle_macos_intro: 在MacOS Ventura 13用Docker安裝Oracle 21c XE。 oracle_macos_steps:

1. **Docker**：下載Docker Desktop。

```
--------------------
| Docker Desktop    |
| [MacOS] [500MB]   |
| [Download Button] |
--------------------
```

2. **啟動**：打開Docker Desktop。
3. **映像**：`docker pull gvenzl/oracle-xe:21-slim`
4. **容器**：`docker run -d -p 1521:1521 -e ORACLE_PASSWORD=Oracle2025 gvenzl/oracle-xe:21-slim`

```
--------------------
| $ docker run ...  |
| [Container ID]    |
| Port 1521         |
--------------------
```

5. **驗證**：`docker exec -it [container_id] sqlplus sys/Oracle2025@//localhost:1521/XE as sysdba`oracle_macos_code:

```sql
SQL> SELECT * FROM v$version;
BANNER
Oracle Database 21c Express Edition
```

oracle_macos_params:

| 參數 | 值 |
| --- | --- |
| 版本 | Oracle 21c XE |
| 映像 | gvenzl/oracle-xe:21-slim |
| 埠 | 1521 |
| 服務 | XE |
| oracle_macos_notes: |  |

- 4GB記憶體分配。
- 檢查1521埠。
- 容器需`docker start [container_id]`重啟。 oracle_macos_structure:

```
dba_users
+------------+---------+
| username   | VARCHAR |
| user_id    | NUMBER  |
| created    | DATE    |
+------------+---------+
```

===

# 正規化說明書

normalization_title: 資料庫正規化說明書 normalization_intro: 資料庫正規化（Normalization）是設計資料庫的過程，透過消除冗餘資料和確保資料一致性，提升儲存效率和查詢正確性。本節詳細說明第一至第五階正規化（1NF 至 5NF），每階包含定義、規則、範例、表格和圖示，適合初學者與進階使用者。

# 第一階正規化（1NF）

first_normal_form_title: 第一階正規化（1NF） first_normal_form_definition: 第一階正規化（1NF）要求表格中的每個欄位值為原子值（不可再分），且每列有唯一主鍵，無重複群組。 first_normal_form_rules:

- 每個欄位包含單一值。
- 無多值屬性或重複群組。
- 每列由主鍵唯一識別。 first_normal_form_example: **未正規化表格**：學生選課表，課程欄包含多值。

```
學生ID | 姓名 | 課程
--- | --- | ---
1 | 張三 | 數學,物理
2 | 李四 | 化學,生物
```

**1NF 表格**：拆分課程為單一行。

```
學生ID | 姓名 | 課程
--- | --- | ---
1 | 張三 | 數學
1 | 張三 | 物理
2 | 李四 | 化學
2 | 李四 | 生物
```

first_normal_form_diagram:

```
未正規化
+------------+--------+--------------+
| 學生ID     | 姓名   | 課程         |
+------------+--------+--------------+
| 1          | 張三   | 數學,物理    |
| 2          | 李四   | 化學,生物    |
+------------+--------+--------------+

1NF
+------------+--------+--------+
| 學生ID     | 姓名   | 課程   |
+------------+--------+--------+
| 1          | 張三   | 數學   |
| 1          | 張三   | 物理   |
| 2          | 李四   | 化學   |
| 2          | 李四   | 生物   |
+------------+--------+--------+
```

first_normal_form_notes:

- 主鍵可為單欄（如學生ID+課程）。
- 1NF 可能增加行數，影響儲存效率，需後續正規化。

# 第二階正規化（2NF）

second_normal_form_title: 第二階正規化（2NF） second_normal_form_definition: 第二階正規化（2NF）要求表格符合 1NF，且所有非主鍵欄位完全依賴主鍵（無部分依賴）。 second_normal_form_rules:

- 符合 1NF。
- 非主鍵欄位不可僅依賴主鍵的一部分（複合主鍵情況）。 second_normal_form_example: **1NF 表格**：學生選課含部分依賴。

```
學生ID | 課程ID | 姓名 | 課程名稱
--- | --- | --- | ---
1 | 101 | 張三 | 數學
1 | 102 | 張三 | 物理
2 | 103 | 李四 | 化學
```

問題：姓名僅依賴學生ID，課程名稱僅依賴課程ID。 **2NF 表格**：拆為學生表和選課表。

```
學生
學生ID | 姓名
--- | ---
1 | 張三
2 | 李四

選課
學生ID | 課程ID | 課程名稱
--- | --- | ---
1 | 101 | 數學
1 | 102 | 物理
2 | 103 | 化學
```

second_normal_form_diagram:

```
1NF
+------------+----------+--------+------------+
| 學生ID     | 課程ID   | 姓名   | 課程名稱   |
+------------+----------+--------+------------+
| 1          | 101      | 張三   | 數學       |
| 1          | 102      | 張三   | 物理       |
| 2          | 103      | 李四   | 化學       |
+------------+----------+--------+------------+

2NF
學生
+------------+--------+
| 學生ID     | 姓名   |
+------------+--------+
| 1          | 張三   |
| 2          | 李四   |
+------------+--------+

選課
+------------+----------+------------+
| 學生ID     | 課程ID   | 課程名稱   |
+------------+----------+------------+
| 1          | 101      | 數學       |
| 1          | 102      | 物理       |
| 2          | 103      | 化學       |
+------------+----------+------------+
```

second_normal_form_notes:

- 僅適用複合主鍵表格。
- 減少冗餘（如姓名重複）。

# 第三階正規化（3NF）

third_normal_form_title: 第三階正規化（3NF） third_normal_form_definition: 第三階正規化（3NF）要求表格符合 2NF，且非主鍵欄位無傳遞依賴（即不依賴其他非主鍵欄位）。 third_normal_form_rules:

- 符合 2NF。
- 非主鍵欄位直接依賴主鍵。 third_normal_form_example: **2NF 表格**：選課表含傳遞依賴。

```
學生ID | 課程ID | 課程名稱 | 教師
--- | --- | --- | ---
1 | 101 | 數學 | 王老師
1 | 102 | 物理 | 陳老師
```

問題：教師依賴課程名稱，非主鍵（學生ID+課程ID）。 **3NF 表格**：拆為選課表和課程表。

```
選課
學生ID | 課程ID
--- | ---
1 | 101
1 | 102

課程
課程ID | 課程名稱 | 教師
--- | --- | ---
101 | 數學 | 王老師
102 | 物理 | 陳老師
```

third_normal_form_diagram:

```
2NF
+------------+----------+------------+----------+
| 學生ID     | 課程ID   | 課程名稱   | 教師     |
+------------+----------+------------+----------+
| 1          | 101      | 數學       | 王老師   |
| 1          | 102      | 物理       | 陳老師   |
+------------+----------+------------+----------+

3NF
選課
+------------+----------+
| 學生ID     | 課程ID   |
+------------+----------+
| 1          | 101      |
| 1          | 102      |
+------------+----------+

課程
+----------+------------+----------+
| 課程ID   | 課程名稱   | 教師     |
+----------+------------+----------+
| 101      | 數學       | 王老師   |
| 102      | 物理       | 陳老師   |
+----------+------------+----------+
```

third_normal_form_notes:

- 3NF 減少更新異常。
- 實務中多止於 3NF。

# 第四階正規化（4NF）

fourth_normal_form_title: 第四階正規化（4NF） fourth_normal_form_definition: 第四階正規化（4NF）要求表格符合 3NF，且無多值依賴（非主鍵欄位間獨立）。 fourth_normal_form_rules:

- 符合 3NF。
- 消除非平凡多值依賴。 fourth_normal_form_example: **3NF 表格**：學生興趣和課程多值依賴。

```
學生ID | 興趣 | 課程
--- | --- | ---
1 | 音樂 | 數學
1 | 音樂 | 物理
1 | 運動 | 數學
1 | 運動 | 物理
```

問題：興趣和課程獨立於學生ID，需拆分。 **4NF 表格**：分為學生興趣表和學生課程表。

```
學生興趣
學生ID | 興趣
--- | ---
1 | 音樂
1 | 運動

學生課程
學生ID | 課程
--- | ---
1 | 數學
1 | 物理
```

fourth_normal_form_diagram:

```
3NF
+------------+--------+--------+
| 學生ID     | 興趣   | 課程   |
+------------+--------+--------+
| 1          | 音樂   | 數學   |
| 1          | 音樂   | 物理   |
| 1          | 運動   | 數學   |
| 1          | 運動   | 物理   |
+------------+--------+--------+

4NF
學生興趣
+------------+--------+
| 學生ID     | 興趣   |
+------------+--------+
| 1          | 音樂   |
| 1          | 運動   |
+------------+--------+

學生課程
+------------+--------+
| 學生ID     | 課程   |
+------------+--------+
| 1          | 數學   |
| 1          | 物理   |
+------------+--------+
```

fourth_normal_form_notes:

- 4NF 罕用，僅在複雜多值關係時應用。
- 拆分可能增加查詢複雜度。

# 第五階正規化（5NF）

fifth_normal_form_title: 第五階正規化（5NF） fifth_normal_form_definition: 第五階正規化（5NF）要求表格符合 4NF，且無聯接依賴（不可透過較小表格聯接重構）。 fifth_normal_form_rules:

- 符合 4NF。
- 表格分解後，聯接不產生偽資料。 fifth_normal_form_example: **4NF 表格**：代理商、產品、公司關係。

```
代理商 | 產品 | 公司
--- | --- | ---
A1 | P1 | C1
A1 | P2 | C1
A2 | P1 | C2
```

問題：聯接依賴導致分解後需三表。 **5NF 表格**：拆為代理商-產品、產品-公司、代理商-公司。

```
代理商-產品
代理商 | 產品
--- | ---
A1 | P1
A1 | P2
A2 | P1

產品-公司
產品 | 公司
--- | ---
P1 | C1
P2 | C1
P1 | C2

代理商-公司
代理商 | 公司
--- | ---
A1 | C1
A2 | C2
```

fifth_normal_form_diagram:

```
4NF
+----------+--------+--------+
| 代理商   | 產品   | 公司   |
+----------+--------+--------+
| A1       | P1     | C1     |
| A1       | P2     | C1     |
| A2       | P1     | C2     |
+----------+--------+--------+

5NF
代理商-產品
+----------+--------+
| 代理商   | 產品   |
+----------+--------+
| A1       | P1     |
| A1       | P2     |
| A2       | P1     |
+----------+--------+

產品-公司
+--------+--------+
| 產品   | 公司   |
+--------+--------+
| P1     | C1     |
| P2     | C1     |
| P1     | C2     |
+--------+--------+

代理商-公司
+----------+--------+
| 代理商   | 公司   |
+----------+--------+
| A1       | C1     |
| A2       | C2     |
+----------+--------+
```

fifth_normal_form_notes:

- 5NF 極少使用，僅在高度複雜關係時必要。
- 需權衡查詢性能。

===

# 效能提升

performance_title: 資料庫效能提升標準作業流程 performance_intro: 資料庫效能提升是確保快速查詢和穩定運行的關鍵。本節針對 MySQL 和 Oracle，介紹三種方法：資料庫配置優化、正規化調整、SQL 語法優化。每部分包含詳細步驟、範例、表格和圖示，幫助您提升效能。

# MySQL 配置優化

mysql_config_title: MySQL 配置優化 mysql_config_intro: 透過調整 MySQL 配置參數，提升查詢速度和資源利用率，適用於高流量應用。 mysql_config_steps:

1. **檢查硬體**：確認 CPU、記憶體（建議 16GB+）、SSD。
2. **調整緩衝區**：編輯 `/etc/my.cnf`，設置 `innodb_buffer_pool_size` 為記憶體的 60%-70%。

```ini
[mysqld]
innodb_buffer_pool_size=8G
```

3. **啟用快取**：設置 `query_cache_size=64M`（MySQL 8.0 前）。
4. **調整連線**：設置 `max_connections=500`。
5. **驗證**：重啟 MySQL，檢查 `SHOW VARIABLES LIKE 'innodb_buffer_pool_size';`mysql_config_code:

```sql
SHOW VARIABLES LIKE 'innodb_buffer_pool_size';
+-------------------------+----------+
| Variable_name           | Value    |
+-------------------------+----------+
| innodb_buffer_pool_size | 8589934592 |
+-------------------------+----------+
```

mysql_config_params:

| 參數 | 值 |
| --- | --- |
| innodb_buffer_pool_size | 8G |
| query_cache_size | 64M |
| max_connections | 500 |
| mysql_config_notes: |  |

- 確保記憶體足夠。
- 檢查日誌 `/var/log/mysql/error.log`。 mysql_config_structure:

```
[無特定結構]
```

# ... 其他效能提升內容（正規化調整、SQL 語法優化）依類似格式生成 ...

===

# SQL 指令 - SELECT

select_title: SQL SELECT - 查詢資料 select_syntax:

```sql
SELECT column1, column2 FROM table_name WHERE condition;
```

select_example_general: 查詢員工姓名和薪資。

```sql
SELECT name, salary FROM employees;
```

select_example_general_table:

| name | salary |
| --- | --- |
| 張三 | 50000.00 |
| 李四 | 55000.00 |
| select_example_mysql: |  |
| 查詢部門為 IT 的員工。 |  |

```sql
SELECT name, salary FROM employees WHERE department = 'IT';
```

select_example_oracle: 查詢薪資前 5 名員工。

```sql
SELECT name, salary FROM employees ORDER BY salary DESC FETCH FIRST 5 ROWS ONLY;
```

select_structure:

```
employees
+-------+---------+
| name  | VARCHAR |
| salary| DECIMAL |
+-------+---------+
```

# SQL 指令 - DISTINCT

distinct_title: SQL DISTINCT - 去除重複 distinct_syntax:

```sql
SELECT DISTINCT column FROM table;
```

distinct_example_general: 查詢不重複的部門。

```sql
SELECT DISTINCT department FROM employees;
```

## distinct_example_general_table: department

IT HR distinct_example_mysql: 查詢不重複的員工姓名。

```sql
SELECT DISTINCT name FROM employees;
```

distinct_example_oracle: 查詢不重複的產品ID。

```sql
SELECT DISTINCT prod_id FROM orders;
```

distinct_structure:

```
employees
+------------+---------+
| department | VARCHAR |
+------------+---------+
```

# ... 其他 SQL 指令（從 WHERE 到 cumulative_sum_percent）依類似格式生成 ...

# SQL 指令 - UNION

union_title: SQL UNION - 合併查詢結果 union_syntax:

```sql
SELECT column1 FROM table1
UNION
SELECT column1 FROM table2;
```

union_example_general: 合併員工和客戶姓名。

```sql
SELECT name FROM employees
UNION
SELECT name FROM customers;
```

## union_example_general_table: name

張三 李四 union_example_mysql: 合併部門員工，排序。

```sql
SELECT name FROM employees WHERE dept = 'HR'
UNION
SELECT name FROM employees WHERE dept = 'IT'
ORDER BY name;
```

## union_example_mysql_table: name

陳七 王五 union_example_oracle: 合併訂單產品ID。

```sql
SELECT prod_id FROM orders
UNION
SELECT prod_id FROM order_history;
```

## union_example_oracle_table: prod_id

1001 1002 union_structure:

```
orders
+---------+-------+
| prod_id | NUMBER|
| date    | DATE  |
+---------+-------+
```

# SQL 指令 - UNION ALL

union_all_title: SQL UNION ALL - 合併查詢結果（含重複） union_all_syntax:

```sql
SELECT column1 FROM table1
UNION ALL
SELECT column1 FROM table2;
```

union_all_example_general: 合併員工和客戶姓名，含重複。

```sql
SELECT name FROM employees
UNION ALL
SELECT name FROM customers;
```

## union_all_example_general_table: name

張三 張三 union_all_example_mysql: 合併部門員工，含重複。

```sql
SELECT name FROM employees WHERE dept = 'HR'
UNION ALL
SELECT name FROM employees WHERE dept = 'IT';
```

## union_all_example_mysql_table: name

張三 王五 union_all_example_oracle: 合併訂單產品ID，含重複。

```sql
SELECT prod_id FROM orders
UNION ALL
SELECT prod_id FROM order_history;
```

## union_all_example_oracle_table: prod_id

1001 1001 union_all_structure:

```
orders
+---------+-------+
| prod_id | NUMBER|
| date    | DATE  |
+---------+-------+
```

# ... 其他進階 SQL 指令（nested_view 到 cumulative_sum_percent）依類似格式生成 ...

# SQL 指令 - 算累積總合百分比

cumulative_sum_percent_title: SQL 算累積總合百分比 - 累積比例 cumulative_sum_percent_syntax:

```sql
SELECT column, (SUM(column) OVER (ORDER BY column) / SUM(column) OVER ()) * 100 AS cumulative_percent FROM table;
```

cumulative_sum_percent_example_general: 按薪資排序計算累積薪資百分比。

```sql
SELECT name, salary, (SUM(salary) OVER (ORDER BY salary) / SUM(salary) OVER ()) * 100 AS cumulative_percent FROM employees;
```

cumulative_sum_percent_example_general_table:

| name | salary | cumulative_percent |
| --- | --- | --- |
| 李四 | 55000.00 | 40.00 |
| 張三 | 60000.00 | 80.00 |
| cumulative_sum_percent_example_mysql: |  |  |
| 按部門計算累積薪資比例（MySQL 8.0+）。 |  |  |

```sql
SELECT name, salary, (SUM(salary) OVER (PARTITION BY department ORDER BY salary) / SUM(salary) OVER (PARTITION BY department)) * 100 AS cumulative_percent FROM employees;
```

cumulative_sum_percent_example_mysql_table:

| name | salary | cumulative_percent |
| --- | --- | --- |
| 趙六 | 60000.00 | 50.00 |
| cumulative_sum_percent_example_oracle: |  |  |
| 按訂單日期計算累積金額比例。 |  |  |

```sql
SELECT order_id, amount, (SUM(amount) OVER (ORDER BY order_date) / SUM(amount) OVER ()) * 100 AS cumulative_percent FROM orders;
```

cumulative_sum_percent_example_oracle_table:

| order_id | amount | cumulative_percent |
| --- | --- | --- |
| 101 | 3000.00 | 30.00 |
| cumulative_sum_percent_structure: |  |  |

```
employees
+-------+---------+
| name  | VARCHAR |
| salary| DECIMAL |
+-------+---------+
```