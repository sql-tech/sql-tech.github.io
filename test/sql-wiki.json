```json
[
    {
        "id": "home",
        "title": "首頁",
        "content": "<h2>歡迎來到 SQL資料庫百科全書</h2><p>「SQL資料庫百科全書」提供基礎、資料定義、進階 SQL 指令教學，包含一般、MySQL、Oracle範例，搭配表格和表結構圖，適合初學者與專業人士。我們還提供MySQL和Oracle在Windows、Linux、MacOS的安裝指南，步驟詳細，點擊左側目錄，立即開啟您的SQL學習之旅！無論是資料庫新手還是資深開發者，這裡都有您需要的知識與實務指引。</p>"
    },
    {
        "id": "db_installation",
        "title": "資料庫安裝說明書",
        "content": "<h2>資料庫安裝說明書</h2><h3>簡介</h3><p>本節提供MySQL和Oracle在Windows、Linux、MacOS的安裝指南，包含步驟、模擬截圖、參數表格和注意事項，幫助您配置資料庫環境。</p><h3>MySQL 安裝 - Windows</h3><h4>簡介</h4><p>在Windows 10/11安裝MySQL 8.0，適用64位系統。</p><h4>安裝步驟</h4><ol><li>下載：訪問MySQL官網，選Windows版本（~400MB）。<pre>--------------------\n| Download MySQL 8.0 |\n| [Windows x64]     |\n| [Download Button] |\n--------------------</pre></li><li>運行：雙擊mysql-installer-web-community-8.0.x.msi，選「Developer Default」，點Next。<pre>--------------------\n| Setup Type       |\n| [x] Developer    |\n| [Next Button]    |\n--------------------</pre></li><li>依賴項：檢查環境（如.NET Framework），點「Execute」安裝缺少項目。</li><li>配置：選「Standalone」，埠3306，點Next。<pre>--------------------\n| Port: [3306]     |\n| [Standalone]     |\n| [Next Button]    |\n--------------------</pre></li><li>密碼：設根用戶密碼（如「MySQL2025!」），點Next。</li><li>安裝：點「Execute」，完成後勾選「Start MySQL」，點Finish。</li><li>驗證：命令提示字元輸入mysql -u root -p，檢查mysql>提示符。<pre>mysql> SHOW DATABASES;\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| mysql              |\n+--------------------+</pre></li></ol><h4>參數</h4><table><tr><th>參數</th><th>值</th></tr><tr><td>版本</td><td>MySQL 8.0</td></tr><tr><td>路徑</td><td>C:\\Program Files\\MySQL</td></tr><tr><td>埠</td><td>3306</td></tr><tr><td>用戶</td><td>root</td></tr></table><h4>注意</h4><ul><li>需2GB空間。</li><li>防火牆允許3306埠。</li><li>忘記密碼用mysqld --skip-grant-tables重設。</li></ul><h4>結構</h4><pre>mysql.user\n+------------+---------+\n| user       | VARCHAR |\n| host       | VARCHAR |\n| password   | VARCHAR |\n+------------+---------+</pre><h3>MySQL 安裝 - Linux</h3><h4>簡介</h4><p>在Ubuntu 22.04安裝MySQL 8.0，適用Linux發行版。</p><h4>安裝步驟</h4><ol><li>更新：sudo apt update && sudo apt upgrade<pre>--------------------\n| $ sudo apt update |\n| [Progress Bar]    |\n| Hit:1 http://...  |\n--------------------</pre></li><li>安裝：sudo apt install mysql-server</li><li>啟動：sudo systemctl start mysql && sudo systemctl enable mysql</li><li>安全：sudo mysql_secure_installation，設密碼，移除不安全選項。<pre>--------------------\n| Root password     |\n| [Input Field]     |\n| [Y/n] Remove...?  |\n--------------------</pre></li><li>驗證：mysql -u root -p，檢查資料庫。<pre>mysql> SHOW DATABASES;\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| mysql              |\n+--------------------+</pre></li></ol><h4>參數</h4><table><tr><th>參數</th><th>值</th></tr><tr><td>版本</td><td>MySQL 8.0</td></tr><tr><td>路徑</td><td>/var/lib/mysql</td></tr><tr><td>埠</td><td>3306</td></tr><tr><td>服務</td><td>mysql</td></tr></table><h4>注意</h4><ul><li>需root權限。</li><li>檢查/etc/mysql配置。</li><li>允許3306埠。</li></ul><h4>結構</h4><pre>mysql.user\n+------------+---------+\n| user       | VARCHAR |\n| host       | VARCHAR |\n| password   | VARCHAR |\n+------------+---------+</pre><h3>MySQL 安裝 - MacOS</h3><h4>簡介</h4><p>在MacOS Ventura 13安裝MySQL 8.0，使用Homebrew。</p><h4>安裝步驟</h4><ol><li>Homebrew：/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"<pre>--------------------\n| $ curl -fsSL ...  |\n| [Installing]      |\n| ==> Success       |\n--------------------</pre></li><li>安裝：brew install mysql</li><li>啟動：brew services start mysql</li><li>密碼：mysql_secure_installation<pre>--------------------\n| Set password?     |\n| [Y/n] [Input]     |\n| [Continue]        |\n--------------------</pre></li><li>驗證：mysql -u root -p<pre>mysql> SHOW DATABASES;\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| mysql              |\n+--------------------+</pre></li></ol><h4>參數</h4><table><tr><th>參數</th><th>值</th></tr><tr><td>版本</td><td>MySQL 8.0</td></tr><tr><td>路徑</td><td>/usr/local/Cellar/mysql</td></tr><tr><td>埠</td><td>3306</td></tr><tr><td>服務</td><td>mysql</td></tr></table><h4>注意</h4><ul><li>更新Homebrew。</li><li>檢查/usr/local/etc/my.cnf。</li></ul><h4>結構</h4><pre>mysql.user\n+------------+---------+\n| user       | VARCHAR |\n| host       | VARCHAR |\n| password   | VARCHAR |\n+------------+---------+</pre><h3>Oracle 安裝 - Windows</h3><h4>簡介</h4><p>在Windows 10/11安裝Oracle 21c XE。</p><h4>安裝步驟</h4><ol><li>下載：訪問Oracle官網，選21c XE（~2GB）。<pre>--------------------\n| Oracle 21c XE     |\n| [Windows x64]     |\n| [Download Button] |\n--------------------</pre></li><li>解壓：解壓oracle-database-xe-21c.zip至C:\\oracle。</li><li>運行：雙擊setup.exe，選路徑C:\\app\\oracle，點Next。<pre>--------------------\n| Destination       |\n| [C:\\app\\oracle]   |\n| [Next Button]     |\n--------------------</pre></li><li>密碼：為SYS/SYSTEM設密碼（如「Oracle2025!」），點Next。</li><li>安裝：點Install，約15分鐘，自動啟動。</li><li>驗證：sqlplus / as sysdba<pre>SQL> SELECT * FROM v$version;\nBANNER\nOracle Database 21c Express Edition</pre></li></ol><h4>參數</h4><table><tr><th>參數</th><th>值</th></tr><tr><td>版本</td><td>Oracle 21c XE</td></tr><tr><td>路徑</td><td>C:\\app\\oracle</td></tr><tr><td>埠</td><td>1521</td></tr><tr><td>服務</td><td>XE</td></tr></table><h4>注意</h4><ul><li>需10GB空間。</li><li>關閉防毒軟體。</li><li>檢查TNS監聽器（lsnrctl status）。</li></ul><h4>結構</h4><pre>dba_users\n+------------+---------+\n| username   | VARCHAR |\n| user_id    | NUMBER  |\n| created    | DATE    |\n+------------+---------+</pre><h3>Oracle 安裝 - Linux</h3><h4>簡介</h4><p>在Oracle Linux 8安裝Oracle 21c XE，透過RPM。</p><h4>安裝步驟</h4><ol><li>下載：下載oracle-database-xe-21c-1.0-1.x86_64.rpm。<pre>--------------------\n| Oracle 21c RPM    |\n| [Linux x64]       |\n| [Download Button] |\n--------------------</pre></li><li>依賴：sudo dnf install -y oracle-database-preinstall-21c</li><li>安裝：sudo rpm -ivh oracle-database-xe-21c-1.0-1.x86_64.rpm</li><li>配置：sudo /etc/init.d/oracle-xe-21c configure<pre>--------------------\n| SYS password      |\n| [Input Field]     |\n| [Continue]        |\n--------------------</pre></li><li>驗證：sqlplus / as sysdba<pre>SQL> SELECT * FROM v$version;\nBANNER\nOracle Database 21c Express Edition</pre></li></ol><h4>參數</h4><table><tr><th>參數</th><th>值</th></tr><tr><td>版本</td><td>Oracle 21c XE</td></tr><tr><td>路徑</td><td>/opt/oracle</td></tr><tr><td>埠</td><td>1521</td></tr><tr><td>服務</td><td>XE</td></tr></table><h4>注意</h4><ul><li>需root權限。</li><li>12GB空間。</li><li>設ORACLE_HOME=/opt/oracle/product/21c/dbhomeXE。</li></ul><h4>結構</h4><pre>dba_users\n+------------+---------+\n| username   | VARCHAR |\n| user_id    | NUMBER  |\n| created    | DATE    |\n+------------+---------+</pre><h3>Oracle 安裝 - MacOS</h3><h4>簡介</h4><p>在MacOS Ventura 13用Docker安裝Oracle 21c XE。</p><h4>安裝步驟</h4><ol><li>Docker：下載Docker Desktop。<pre>--------------------\n| Docker Desktop    |\n| [MacOS] [500MB]   |\n| [Download Button] |\n--------------------</pre></li><li>啟動：打開Docker Desktop。</li><li>映像：docker pull gvenzl/oracle-xe:21-slim</li><li>容器：docker run -d -p 1521:1521 -e ORACLE_PASSWORD=Oracle2025 gvenzl/oracle-xe:21-slim<pre>--------------------\n| $ docker run ...  |\n| [Container ID]    |\n| Port 1521         |\n--------------------</pre></li><li>驗證：docker exec -it [container_id] sqlplus sys/Oracle2025@//localhost:1521/XE as sysdba<pre>SQL> SELECT * FROM v$version;\nBANNER\nOracle Database 21c Express Edition</pre></li></ol><h4>參數</h4><table><tr><th>參數</th><th>值</th></tr><tr><td>版本</td><td>Oracle 21c XE</td></tr><tr><td>映像</td><td>gvenzl/oracle-xe:21-slim</td></tr><tr><td>埠</td><td>1521</td></tr><tr><td>服務</td><td>XE</td></tr></table><h4>注意</h4><ul><li>4GB記憶體分配。</li><li>檢查1521埠。</li><li>容器需docker start [container_id]重啟。</li></ul><h4>結構</h4><pre>dba_users\n+------------+---------+\n| username   | VARCHAR |\n| user_id    | NUMBER  |\n| created    | DATE    |\n+------------+---------+</pre>"
    },
    {
        "id": "db_normalization",
        "title": "資料庫正規化說明書",
        "content": "<h2>資料庫正規化說明書</h2><h3>簡介</h3><p>資料庫正規化（Normalization）是設計資料庫的過程，透過消除冗餘資料和確保資料一致性，提升儲存效率和查詢正確性。本節詳細說明第一至第五階正規化（1NF 至 5NF），每階包含定義、規則、範例、表格和圖示，適合初學者與進階使用者。</p><h3>第一階正規化（1NF）</h3><h4>定義</h4><p>第一階正規化（1NF）要求表格中的每個欄位值為原子值（不可再分），且每列有唯一主鍵，無重複群組。</p><h4>規則</h4><ul><li>每個欄位包含單一值。</li><li>無多值屬性或重複群組。</li><li>每列由主鍵唯一識別。</li></ul><h4>範例</h4><p>未正規化表格：學生選課表，課程欄包含多值。</p><table><tr><th>學生ID</th><th>姓名</th><th>課程</th></tr><tr><td>1</td><td>張三</td><td>數學,物理</td></tr><tr><td>2</td><td>李四</td><td>化學,生物</td></tr></table><p>1NF 表格：拆分課程為單一行。</p><table><tr><th>學生ID</th><th>姓名</th><th>課程</th></tr><tr><td>1</td><td>張三</td><td>數學</td></tr><tr><td>1</td><td>張三</td><td>物理</td></tr><tr><td>2</td><td>李四</td><td>化學</td></tr><tr><td>2</td><td>李四</td><td>生物</td></tr></table><h4>圖示</h4><pre>未正規化\n+------------+--------+--------------+\n| 學生ID     | 姓名   | 課程         |\n+------------+--------+--------------+\n| 1          | 張三   | 數學,物理    |\n| 2          | 李四   | 化學,生物    |\n+------------+--------+--------------+\n\n1NF\n+------------+--------+--------+\n| 學生ID     | 姓名   | 課程   |\n+------------+--------+--------+\n| 1          | 張三   | 數學   |\n| 1          | 張三   | 物理   |\n| 2          | 李四   | 化學   |\n| 2          | 李四   | 生物   |\n+------------+--------+--------+</pre><h4>注意</h4><ul><li>主鍵可為單欄（如學生ID+課程）。</li><li>1NF 可能增加行數，影響儲存效率，需後續正規化。</li></ul><h3>第二階正規化（2NF）</h3><h4>定義</h4><p>第二階正規化（2NF）要求表格符合 1NF，且所有非主鍵欄位完全依賴主鍵（無部分依賴）。</p><h4>規則</h4><ul><li>符合 1NF。</li><li>非主鍵欄位不可僅依賴主鍵的一部分（複合主鍵情況）。</li></ul><h4>範例</h4><p>1NF 表格：學生選課含部分依賴。</p><table><tr><th>學生ID</th><th>課程ID</th><th>姓名</th><th>課程名稱</th></tr><tr><td>1</td><td>101</td><td>張三</td><td>數學</td></tr><tr><td>1</td><td>102</td><td>張三</td><td>物理</td></tr><tr><td>2</td><td>103</td><td>李四</td><td>化學</td></tr></table><p>問題：姓名僅依賴學生ID，課程名稱僅依賴課程ID。</p><p>2NF 表格：拆為學生表和選課表。</p><table><tr><th>學生ID</th><th>姓名</th></tr><tr><td>1</td><td>張三</td></tr><tr><td>2</td><td>李四</td></tr></table><table><tr><th>學生ID</th><th>課程ID</th><th>課程名稱</th></tr><tr><td>1</td><td>101</td><td>數學</td></tr><tr><td>1</td><td>102</td><td>物理</td></tr><tr><td>2</td><td>103</td><td>化學</td></tr></table><h4>圖示</h4><pre>1NF\n+------------+----------+--------+------------+\n| 學生ID     | 課程ID   | 姓名   | 課程名稱   |\n+------------+----------+--------+------------+\n| 1          | 101      | 張三   | 數學       |\n| 1          | 102      | 張三   | 物理       |\n| 2          | 103      | 李四   | 化學       |\n+------------+----------+--------+------------+\n\n2NF\n學生\n+------------+--------+\n| 學生ID     | 姓名   |\n+------------+--------+\n| 1          | 張三   |\n| 2          | 李四   |\n+------------+--------+\n\n選課\n+------------+----------+------------+\n| 學生ID     | 課程ID   | 課程名稱   |\n+------------+----------+------------+\n| 1          | 101      | 數學       |\n| 1          | 102      | 物理       |\n| 2          | 103      | 化學       |\n+------------+----------+------------+</pre><h4>注意</h4><ul><li>僅適用複合主鍵表格。</li><li>減少冗餘（如姓名重複）。</li></ul><h3>第三階正規化（3NF）</h3><h4>定義</h4><p>第三階正規化（3NF）要求表格符合 2NF，且非主鍵欄位無傳遞依賴（即不依賴其他非主鍵欄位）。</p><h4>規則</h4><ul><li>符合 2NF。</li><li>非主鍵欄位直接依賴主鍵。</li></ul><h4>範例</h4><p>2NF 表格：選課表含傳遞依賴。</p><table><tr><th>學生ID</th><th>課程ID</th><th>課程名稱</th><th>教師</th></tr><tr><td>1</td><td>101</td><td>數學</td><td>王老師</td></tr><tr><td>1</td><td>102</td><td>物理</td><td>陳老師</td></tr></table><p>問題：教師依賴課程名稱，非主鍵（學生ID+課程ID）。</p><p>3NF 表格：拆為選課表和課程表。</p><table><tr><th>學生ID</th><th>課程ID</th></tr><tr><td>1</td><td>101</td></tr><tr><td>1</td><td>102</td></tr></table><table><tr><th>課程ID</th><th>課程名稱</th><th>教師</th></tr><tr><td>101</td><td>數學</td><td>王老師</td></tr><tr><td>102</td><td>物理</td><td>陳老師</td></tr></table><h4>圖示</h4><pre>2NF\n+------------+----------+------------+----------+\n| 學生ID     | 課程ID   | 課程名稱   | 教師     |\n+------------+----------+------------+----------+\n| 1          | 101      | 數學       | 王老師   |\n| 1          | 102      | 物理       | 陳老師   |\n+------------+----------+------------+----------+\n\n3NF\n選課\n+------------+----------+\n| 學生ID     | 課程ID   |\n+------------+----------+\n| 1          | 101      |\n| 1          | 102      |\n+------------+----------+\n\n課程\n+----------+------------+----------+\n| 課程ID   | 課程名稱   | 教師     |\n+----------+------------+----------+\n| 101      | 數學       | 王老師   |\n| 102      | 物理       | 陳老師   |\n+----------+------------+----------+</pre><h4>注意</h4><ul><li>3NF 減少更新異常。</li><li>實務中多止於 3NF。</li></ul><h3>第四階正規化（4NF）</h3><h4>定義</h4><p>第四階正規化（4NF）要求表格符合 3NF，且無多值依賴（非主鍵欄位間獨立）。</p><h4>規則</h4><ul><li>符合 3NF。</li><li>消除非平凡多值依賴。</li></ul><h4>範例</h4><p>3NF 表格：學生興趣和課程多值依賴。</p><table><tr><th>學生ID</th><th>興趣</th><th>課程</th></tr><tr><td>1</td><td>音樂</td><td>數學</td></tr><tr><td>1</td><td>音樂</td><td>物理</td></tr><tr><td>1</td><td>運動</td><td>數學</td></tr><tr><td>1</td><td>運動</td><td>物理</td></tr></table><p>問題：興趣和課程獨立於學生ID，需拆分。</p><p>4NF 表格：分為學生興趣表和學生課程表。</p><table><tr><th>學生ID</th><th>興趣</th></tr><tr><td>1</td><td>音樂</td></tr><tr><td>1</td><td>運動</td></tr></table><table><tr><th>學生ID</th><th>課程</th></tr><tr><td>1</td><td>數學</td></tr><tr><td>1</td><td>物理</td></tr></table><h4>圖示</h4><pre>3NF\n+------------+--------+--------+\n| 學生ID     | 興趣   | 課程   |\n+------------+--------+--------+\n| 1          | 音樂   | 數學   |\n| 1          | 音樂   | 物理   |\n| 1          | 運動   | 數學   |\n| 1          | 運動   | 物理   |\n+------------+--------+--------+\n\n4NF\n學生興趣\n+------------+--------+\n| 學生ID     | 興趣   |\n+------------+--------+\n| 1          | 音樂   |\n| 1          | 運動   |\n+------------+--------+\n\n學生課程\n+------------+--------+\n| 學生ID     | 課程   |\n+------------+--------+\n| 1          | 數學   |\n| 1          | 物理   |\n+------------+--------+</pre><h4>注意</h4><ul><li>4NF 罕用，僅在複雜多值關係時應用。</li><li>拆分可能增加查詢複雜度。</li></ul><h3>第五階正規化（5NF）</h3><h4>定義</h4><p>第五階正規化（5NF）要求表格符合 4NF，且無聯接依賴（不可透過較小表格聯接重構）。</p><h4>規則</h4><ul><li>符合 4NF。</li><li>表格分解後，聯接不產生偽資料。</li></ul><h4>範例</h4><p>4NF 表格：代理商、產品、公司關係。</p><table><tr><th>代理商</th><th>產品</th><th>公司</th></tr><tr><td>A1</td><td>P1</td><td>C1</td></tr><tr><td>A1</td><td>P2</td><td>C1</td></tr><tr><td>A2</td><td>P1</td><td>C2</td></tr></table><p>問題：聯接依賴導致分解後需三表。</p><p>5NF 表格：拆為代理商-產品、產品-公司、代理商-公司。</p><table><tr><th>代理商</th><th>產品</th></tr><tr><td>A1</td><td>P1</td></tr><tr><td>A1</td><td>P2</td></tr><tr><td>A2</td><td>P1</td></tr></table><table><tr><th>產品</th><th>公司</th></tr><tr><td>P1</td><td>C1</td></tr><tr><td>P2</td><td>C1</td></tr><tr><td>P1</td><td>C2</td></tr></table><table><tr><th>代理商</th><th>公司</th></tr><tr><td>A1</td><td>C1</td></tr><tr><td>A2</td><td>C2</td></tr></table><h4>圖示</h4><pre>4NF\n+----------+--------+--------+\n| 代理商   | 產品   | 公司   |\n+----------+--------+--------+\n| A1       | P1     | C1     |\n| A1       | P2     | C1     |\n| A2       | P1     | C2     |\n+----------+--------+--------+\n\n5NF\n代理商-產品\n+----------+--------+\n| 代理商   | 產品   |\n+----------+--------+\n| A1       | P1     |\n| A1       | P2     |\n| A2       | P1     |\n+----------+--------+\n\n產品-公司\n+--------+--------+\n| 產品   | 公司   |\n+--------+--------+\n| P1     | C1     |\n| P2     | C1     |\n| P1     | C2     |\n+--------+--------+\n\n代理商-公司\n+----------+--------+\n| 代理商   | 公司   |\n+----------+--------+\n| A1       | C1     |\n| A2       | C2     |\n+----------+--------+</pre><h4>注意</h4><ul><li>5NF 極少使用，僅在高度複雜關係時必要。</li><li>需權衡查詢性能。</li></ul>"
    },
    {
        "id": "db_performance",
        "title": "資料庫效能提升標準作業流程",
        "content": "<h2>資料庫效能提升標準作業流程</h2><h3>簡介</h3><p>資料庫效能提升是確保快速查詢和穩定運行的關鍵。本節針對 MySQL 和 Oracle，介紹三種方法：資料庫配置優化、正規化調整、SQL 語法優化。每部分包含詳細步驟、範例、表格和圖示，幫助您提升效能。</p><h3>MySQL 配置優化</h3><h4>簡介</h4><p>透過調整 MySQL 配置參數，提升查詢速度和資源利用率，適用於高流量應用。</p><h4>步驟</h4><ol><li>檢查硬體：確認 CPU、記憶體（建議 16GB+）、SSD。</li><li>調整緩衝區：編輯 /etc/my.cnf，設置 innodb_buffer_pool_size 為記憶體的 60%-70%。 <pre>[mysqld]\ninnodb_buffer_pool_size=4G</pre></li><li>查詢快取：啟用 query_cache_size=64M（MySQL 8.0 前）。</li><li>連線數：設置 max_connections=500。</li><li>驗證：重啟 sudo systemctl restart mysql，用 SHOW VARIABLES LIKE 'innodb_buffer%' 檢查。<pre>+--------------------------+---------+\n| Variable_name            | Value   |\n+--------------------------+---------+\n| innodb_buffer_pool_size  | 4G      |\n+--------------------------+---------+</pre></li></ol><h4>參數</h4><table><tr><th>參數</th><th>建議值</th><th>說明</th></tr><tr><td>innodb_buffer_pool_size</td><td>4G-8G</td><td>記憶體快取資料</td></tr><tr><td>query_cache_size</td><td>64M</td><td>快取查詢結果</td></tr><tr><td>max_connections</td><td>500</td><td>最大連線數</td></tr></table><h4>圖示</h4><pre>MySQL 配置\n+------------------+       +------------------+\n| 硬體 (16GB RAM) | ----> | Buffer Pool (4G) |\n+------------------+       +------------------+\n                           | Query Cache      |\n                           +------------------+\n                           | Connections (500)|\n                           +------------------+</pre><h4>注意</h4><ul><li>避免過高緩衝，保留作業系統記憶體。</li><li>MySQL 8.0 移除 query_cache，改用索引。</li></ul><h3>Oracle 配置優化</h3><h4>簡介</h4><p>調整 Oracle 參數，提升大規模資料庫性能，適用企業應用。</p><h4>步驟</h4><ol><li>硬體：確保 32GB+ 記憶體，NVMe SSD。</li><li>SGA 調整：用 sqlplus / as sysdba，設置 ALTER SYSTEM SET sga_target=8G;。</li><li>PGA：設置 ALTER SYSTEM SET pga_aggregate_target=2G;。</li><li>並行：啟用 ALTER SYSTEM SET parallel_max_servers=16;。</li><li>驗證：SHOW PARAMETER sga_target;<pre>NAME            TYPE    VALUE\n--------------- ------- --------\nsga_target      big integer 8G</pre></li></ol><h4>參數</h4><table><tr><th>參數</th><th>建議值</th><th>說明</th></tr><tr><td>sga_target</td><td>8G</td><td>系統全域區域</td></tr><tr><td>pga_aggregate_target</td><td>2G</td><td>程序全域區域</td></tr><tr><td>parallel_max_servers</td><td>16</td><td>並行執行</td></tr></table><h4>圖示</h4><pre>Oracle 配置\n+------------------+       +------------------+\n| 硬體 (32GB RAM) | ----> | SGA (8G)         |\n+------------------+       +------------------+\n                           | PGA (2G)         |\n                           +------------------+\n                           | Parallel (16)    |\n                           +------------------+</pre><h4>注意</h4><ul><li>檢查 spfile 持久化參數。</li><li>高並行需 CPU 支援。</li></ul><h3>正規化調整效能</h3><h4>簡介</h4><p>正規化減少冗餘，但過度正規化可能增加聯接成本。本節說明如何平衡正規化與效能。</p><h4>步驟</h4><ol><li>分析：檢查表格聯接次數，找出頻繁查詢。</li><li>反正規化：合併常用表格，減少 JOIN。例如，將課程名稱併入選課表。<pre>SELECT s.student_id, c.course_name\nFROM students s JOIN courses c ON s.course_id = c.course_id;</pre>改為：<table><tr><th>student_id</th><th>course_name</th></tr><tr><td>1</td><td>數學</td></tr></table></li><li>索引：為合併表加索引：CREATE INDEX idx_student_course ON students(course_name);。</li><li>驗證：用 EXPLAIN 檢查查詢計劃。<pre>MySQL> EXPLAIN SELECT course_name FROM students;\n+----+-------------+---------+-------+\n| id | select_type | table   | type  |\n+----+-------------+---------+-------+\n| 1  | SIMPLE      | students| index |\n+----+-------------+---------+-------+</pre></li></ol><h4>範例</h4><p>正規化：學生和課程分開，需 JOIN。</p><table><tr><th>student_id</th><th>course_id</th></tr><tr><td>1</td><td>101</td></tr></table><table><tr><th>course_id</th><th>course_name</th></tr><tr><td>101</td><td>數學</td></tr></table><p>反正規化：合併減少查詢。</p><table><tr><th>student_id</th><th>course_name</th></tr><tr><td>1</td><td>數學</td></tr></table><h4>圖示</h4><pre>正規化\n學生                課程\n+------------+       +------------+\n| student_id || course_id  |\n| course_id  |       | course_name|\n+------------+       +------------+\n\n反正規化\n學生\n+------------+------------+\n| student_id | course_name|\n+------------+------------+</pre><h4>注意</h4><ul><li>反正規化增加儲存，需監控。</li><li>僅對高頻查詢反正規化。</li></ul><h3>SQL 語法優化</h3><h4>簡介</h4><p>優化 SQL 語法可減少執行時間，適用 MySQL 和 Oracle。</p><h4>步驟</h4><ol><li>索引：為 WHERE 和 JOIN 欄位加索引：CREATE INDEX idx_salary ON employees(salary);。</li><li>精簡查詢：僅選必要欄位。<pre>-- 慢\nSELECT * FROM employees WHERE salary > 50000;\n-- 快\nSELECT name, salary FROM employees WHERE salary > 50000;</pre></li><li>避免函數：不在索引欄位用函數。<pre>-- 慢\nSELECT name FROM employees WHERE YEAR(hire_date) = 2023;\n-- 快\nSELECT name FROM employees WHERE hire_date >= '2023-01-01' AND hire_date < '2024-01-01';</pre></li><li>子查詢改 JOIN：<pre>-- 慢\nSELECT name FROM employees WHERE dept_id IN (SELECT dept_id FROM departments WHERE location = 'Taipei');\n-- 快\nSELECT e.name FROM employees e JOIN departments d ON e.dept_id = d.dept_id WHERE d.location = 'Taipei';</pre></li><li>驗證：用 EXPLAIN PLAN（Oracle）或 EXPLAIN（MySQL）。<pre>MySQL> EXPLAIN SELECT name FROM employees WHERE salary > 50000;\n+----+-------------+---------+-------+\n| id | select_type | table   | type  |\n+----+-------------+---------+-------+\n| 1  | SIMPLE      | employees| range |\n+----+-------------+---------+-------+</pre></li></ol><h4>範例</h4><p>未優化：全表掃描。</p><pre>SELECT * FROM employees WHERE UPPER(name) = 'ZHANGSAN';</pre><p>優化：索引查詢。</p><pre>SELECT name, salary FROM employees WHERE name = 'ZhangSan';\nCREATE INDEX idx_name ON employees(name);</pre><h4>圖示</h4><pre>未優化\n+------------------+\n| 全表掃描 (慢)    |\n| employees (10M)   |\n+------------------+\n\n優化\n+------------------+\n| 索引查詢 (快)    |\n| idx_name --------+\n+------------------+</pre><h4>注意</h4><ul><li>索引過多增加寫入成本。</li><li>定期用 ANALYZE TABLE 更新統計。</li></ul>"
    },
    {
        "id": "sql_select",
        "title": "SQL SELECT - 查詢資料表資料",
        "content": "<h3>語法</h3><p>SELECT 檢索資料表資料。</p><pre>SELECT column1, column2 FROM table_name WHERE condition;</pre><h3>範例</h3><h4>一般</h4><p>查詢員工姓名和入職日期。</p><pre>SELECT name, hire_date FROM employees WHERE department = 'HR';</pre><table><tr><th>name</th><th>hire_date</th></tr><tr><td>張三</td><td>2023-01-01</td></tr><tr><td>李四</td><td>2023-02-01</td></tr></table><h4>MySQL</h4><p>查詢高薪員工，限10筆。</p><pre>SELECT name, salary FROM employees WHERE salary > 50000 LIMIT 10;</pre><table><tr><th>name</th><th>salary</th></tr><tr><td>王五</td><td>60000.00</td></tr></table><h4>Oracle</h4><p>查詢前5名員工。</p><pre>SELECT name, department FROM employees WHERE ROWNUM <= 5;</pre><table><tr><th>name</th><th>department</th></tr><tr><td>趙六</td><td>IT</td></tr></table><h3>結構</h3><pre>employees\n+------------+---------+\n| id         | INT     |\n| name       | VARCHAR |\n| hire_date  | DATE    |\n| salary     | DECIMAL |\n| department | VARCHAR |\n+------------+---------+</pre>"
    },
    {
        "id": "sql_distinct",
        "title": "SQL DISTINCT - 去除重複值",
        "content": "<h3>語法</h3><p>DISTINCT 去除重複行。</p><pre>SELECT DISTINCT column1 FROM table_name;</pre><h3>範例</h3><h4>一般</h4><p>查詢不重複部門。</p><pre>SELECT DISTINCT department FROM employees;</pre><table><tr><th>department</th></tr><tr><td>HR</td></tr><tr><td>IT</td></tr></table><h4>MySQL</h4><p>查詢不重複職位。</p><pre>SELECT DISTINCT job_title FROM employees;</pre><table><tr><th>job_title</th></tr><tr><td>Manager</td></tr><tr><td>Developer</td></tr></table><h4>Oracle</h4><p>查詢不重複城市。</p><pre>SELECT DISTINCT city FROM locations;</pre><table><tr><th>city</th></tr><tr><td>Taipei</td></tr><tr><td>Kaohsiung</td></tr></table><h3>結構</h3><pre>employees\n+------------+---------+\n| id         | INT     |\n| department | VARCHAR |\n| job_title  | VARCHAR |\n+------------+---------+</pre>"
    },
    {
        "id": "sql_where",
        "title": "SQL WHERE - 篩選資料",
        "content": "<h3>語法</h3><p>WHERE 篩選符合條件的資料。</p><pre>SELECT column1 FROM table_name WHERE condition;</pre><h3>範例</h3><h4>一般</h4><p>查詢高薪員工。</p><pre>SELECT name, salary FROM employees WHERE salary > 50000;</pre><table><tr><th>name</th><th>salary</th></tr><tr><td>張三</td><td>60000.00</td></tr><tr><td>李四</td><td>55000.00</td></tr></table><h4>MySQL</h4><p>查詢2023年入職員工。</p><pre>SELECT name, hire_date FROM employees WHERE YEAR(hire_date) = 2023;</pre><table><tr><th>name</th><th>hire_date</th></tr><tr><td>王五</td><td>2023-03-01</td></tr></table><h4>Oracle</h4><p>查詢IT部門員工。</p><pre>SELECT name, department FROM employees WHERE department = 'IT';</pre><table><tr><th>name</th><th>department</th></tr><tr><td>趙六</td><td>IT</td></tr></table><h3>結構</h3><pre>employees\n+------------+---------+\n| id         | INT     |\n| name       | VARCHAR |\n| salary     | DECIMAL |\n| hire_date  | DATE    |\n| department | VARCHAR |\n+------------+---------+</pre>"
    },
    {
        "id": "sql_and_or",
        "title": "SQL AND OR - 邏輯條件",
        "content": "<h3>語法</h3><p>AND/OR 組合條件。</p><pre>SELECT column FROM table WHERE condition1 AND/OR condition2;</pre><h3>範例</h3><h4>一般</h4><p>查詢IT部門高薪員工。</p><pre>SELECT name, salary FROM employees WHERE department = 'IT' AND salary > 50000;</pre><table><tr><th>name</th><th>salary</th></tr><tr><td>趙六</td><td>60000.00</td></tr></table><h4>MySQL</h4><p>查詢HR或Sales員工。</p><pre>SELECT name FROM employees WHERE department = 'HR' OR department = 'Sales';</pre><table><tr><th>name</th></tr><tr><td>張三</td></tr><tr><td>李四</td></tr></table><h4>Oracle</h4><p>查詢高薪或管理職。</p><pre>SELECT name FROM employees WHERE salary > 70000 OR job_title = 'Manager';</pre><table><tr><th>name</th></tr><tr><td>陳七</td></tr></table><h3>結構</h3><pre>employees\n+------------+---------+\n| id         | INT     |\n| name       | VARCHAR |\n| salary     | DECIMAL |\n| department | VARCHAR |\n| job_title  | VARCHAR |\n+------------+---------+</pre>"
    },
    {
        "id": "sql_in",
        "title": "SQL IN - 匹配多值",
        "content": "<h3>語法</h3><p>IN 指定多值，簡化條件。</p><pre>SELECT column FROM table WHERE column IN (value1, value2);</pre><h3>範例</h3><h4>一般</h4><p>查詢HR和IT部門員工。</p><pre>SELECT name, department FROM employees WHERE department IN ('HR', 'IT');</pre><table><tr><th>name</th><th>department</th></tr><tr><td>張三</td><td>HR</td></tr><tr><td>趙六</td><td>IT</td></tr></table><h4>MySQL</h4><p>查詢特定職位員工。</p><pre>SELECT name, job_title FROM employees WHERE job_title IN ('Manager', 'Developer');</pre><table><tr><th>name</th><th>job_title</th></tr><tr><td>陳七</td><td>Manager</td></tr><tr><td>王五</td><td>Developer</td></tr></table><h4>Oracle</h4><p>查詢特定城市客戶。</p><pre>SELECT name, city FROM customers WHERE city IN ('Taipei', 'Kaohsiung');</pre><table><tr><th>name</th><th>city</th></tr><tr><td>林八</td><td>Taipei</td></tr></table><h3>結構</h3><pre>employees\n+------------+---------+\n| id         | INT     |\n| name       | VARCHAR |\n| department | VARCHAR |\n| job_title  | VARCHAR |\n+------------+---------+</pre>"
    },
    {
        "id": "sql_between",
        "title": "SQL BETWEEN - 範圍篩選",
        "content": "<h3>語法</h3><p>BETWEEN 篩選範圍內資料。</p><pre>SELECT column FROM table WHERE column BETWEEN value1 AND value2;</pre><h3>範例</h3><h4>一般</h4><p>查詢薪資40000-60000的員工。</p><pre>SELECT name, salary FROM employees WHERE salary BETWEEN 40000 AND 60000;</pre><table><tr><th>name</th><th>salary</th></tr><tr><td>李四</td><td>55000.00</td></tr></table><h4>MySQL</h4><p>查詢2023年入職員工。</p><pre>SELECT name, hire_date FROM employees WHERE hire_date BETWEEN '2023-01-01' AND '2023-12-31';</pre><table><tr><th>name</th><th>hire_date</th></tr><tr><td>王五</td><td>2023-03-01</td></tr></table><h4>Oracle</h4><p>查詢訂單金額範圍。</p><pre>SELECT order_id, amount FROM orders WHERE amount BETWEEN 1000 AND 5000;</pre><table><tr><th>order_id</th><th>amount</th></tr><tr><td>101</td><td>3000.00</td></tr></table><h3>結構</h3><pre>employees\n+------------+---------+\n| id         | INT     |\n| name       | VARCHAR |\n| salary     | DECIMAL |\n| hire_date  | DATE    |\n+------------+---------+</pre>"
    },
    {
        "id": "sql_wildcard",
        "title": "SQL 萬用字元 - 模式匹配",
        "content": "<h3>語法</h3><p>萬用字元（%, _）與 LIKE 搭配用於模式匹配。</p><pre>SELECT column FROM table WHERE column LIKE pattern;</pre><h3>範例</h3><h4>一般</h4><p>查詢姓名以「張」開頭的員工。</p><pre>SELECT name FROM employees WHERE name LIKE '張%';</pre><table><tr><th>name</th></tr><tr><td>張三</td></tr></table><h4>MySQL</h4><p>查詢部門含「Sale」的記錄。</p><pre>SELECT name, department FROM employees WHERE department LIKE '%Sale%';</pre><table><tr><th>name</th><th>department</th></tr><tr><td>李四</td><td>Sales</td></tr></table><h4>Oracle</h4><p>查詢產品名稱第二字為「P」。</p><pre>SELECT prod_name FROM products WHERE prod_name LIKE '_P%';</pre><table><tr><th>prod_name</th></tr><tr><td>Apple</td></tr></table><h3>結構</h3><pre>employees\n+------------+---------+\n| id         | INT     |\n| name       | VARCHAR |\n| department | VARCHAR |\n+------------+---------+</pre>"
    },
    {
        "id": "sql_like",
        "title": "SQL LIKE - 模式匹配查詢",
        "content": "<h3>語法</h3><p>LIKE 搭配萬用字元篩選資料。</p><pre>SELECT column FROM table WHERE column LIKE pattern;</pre><h3>範例</h3><h4>一般</h4><p>查詢職位含「Manager」的員工。</p><pre>SELECT name, job_title FROM employees WHERE job_title LIKE '%Manager%';</pre><table><tr><th>name</th><th>job_title</th></tr><tr><td>陳七</td><td>Manager</td></tr></table><h4>MySQL</h4><p>查詢電子郵件以「@example.com」結尾的客戶。</p><pre>SELECT name, email FROM customers WHERE email LIKE '%@example.com';</pre><table><tr><th>name</th><th>email</th></tr><tr><td>林八</td><td>lin@example.com</td></tr></table><h4>Oracle</h4><p>查詢城市以「Tai」開頭。</p><pre>SELECT city FROM locations WHERE city LIKE 'Tai%';</pre><table><tr><th>city</th></tr><tr><td>Taipei</td></tr></table><h3>結構</h3><pre>customers\n+-------+---------+\n| id    | INT     |\n| name  | VARCHAR |\n| email | VARCHAR |\n+-------+---------+</pre>"
    },
    {
        "id": "sql_order_by",
        "title": "SQL ORDER BY - 排序結果",
        "content": "<h3>語法</h3><p>ORDER BY 對結果排序，支援ASC/DESC。</p><pre>SELECT column FROM table ORDER BY column [ASC|DESC];</pre><h3>範例</h3><h4>一般</h4><p>按薪資降序查詢員工。</p><pre>SELECT name, salary FROM employees ORDER BY salary DESC;</pre><table><tr><th>name</th><th>salary</th></tr><tr><td>趙六</td><td>60000.00</td></tr><tr><td>李四</td><td>55000.00</td></tr></table><h4>MySQL</h4><p>按入職日期升序查詢。</p><pre>SELECT name, hire_date FROM employees ORDER BY hire_date ASC;</pre><table><tr><th>name</th><th>hire_date</th></tr><tr><td>張三</td><td>2023-01-01</td></tr></table><h4>Oracle</h4><p>按部門和薪資排序。</p><pre>SELECT name, department, salary FROM employees ORDER BY department ASC, salary DESC;</pre><table><tr><th>name</th><th>department</th><th>salary</th></tr><tr><td>張三</td><td>HR</td><td>55000.00</td></tr></table><h3>結構</h3><pre>employees\n+------------+---------+\n| id         | INT     |\n| name       | VARCHAR |\n| salary     | DECIMAL |\n| hire_date  | DATE    |\n| department | VARCHAR |\n+------------+---------+</pre>"
    },
    {
        "id": "sql_function",
        "title": "SQL 函數 - 資料處理",
        "content": "<h3>語法</h3><p>SQL函數處理資料，如聚合或字串操作。</p><pre>SELECT function(column) FROM table;</pre><h3>範例</h3><h4>一般</h4><p>計算平均薪資。</p><pre>SELECT AVG(salary) AS avg_salary FROM employees;</pre><table><tr><th>avg_salary</th></tr><tr><td>55000.00</td></tr></table><h4>MySQL</h4><p>合併姓名和部門。</p><pre>SELECT CONCAT(name, ' - ', department) AS info FROM employees;</pre><table><tr><th>info</th></tr><tr><td>張三 - HR</td></tr></table><h4>Oracle</h4><p>計算訂單總數。</p><pre>SELECT COUNT(*) AS total_orders FROM orders;</pre><table><tr><th>total_orders</th></tr><tr><td>100</td></tr></table><h3>結構</h3><pre>employees\n+------------+---------+\n| id         | INT     |\n| name       | VARCHAR |\n| salary     | DECIMAL |\n| department | VARCHAR |\n+------------+---------+</pre>"
    },
    {
        "id": "sql_avg",
        "title": "SQL 平均值 - 計算平均",
        "content": "<h3>語法</h3><p>AVG 計算數值欄位平均值。</p><pre>SELECT AVG(column) FROM table;</pre><h3>範例</h3><h4>一般</h4><p>計算員工平均薪資。</p><pre>SELECT AVG(salary) AS avg_salary FROM employees;</pre><table><tr><th>avg_salary</th></tr><tr><td>55000.00</td></tr></table><h4>MySQL</h4><p>計算IT部門平均薪資。</p><pre>SELECT AVG(salary) AS avg_it_salary FROM employees WHERE department = 'IT';</pre><table><tr><th>avg_it_salary</th></tr><tr><td>60000.00</td></tr></table><h4>Oracle</h4><p>計算訂單平均金額。</p><pre>SELECT AVG(amount) AS avg_amount FROM orders;</pre><table><tr><th>avg_amount</th></tr><tr><td>3500.00</td></tr></table><h3>結構</h3><pre>employees\n+------------+---------+\n| id         | INT     |\n| salary     | DECIMAL |\n| department | VARCHAR |\n+------------+---------+</pre>"
    },
    {
        "id": "sql_count",
        "title": "SQL COUNT - 計數記錄",
        "content": "<h3>語法</h3><p>COUNT 計算符合條件的記錄數。</p><pre>SELECT COUNT(column) FROM table WHERE condition;</pre><h3>範例</h3><h4>一般</h4><p>計算員工總數。</p><pre>SELECT COUNT(*) AS total_employees FROM employees;</pre><table><tr><th>total_employees</th></tr><tr><td>50</td></tr></table><h4>MySQL</h4><p>計算HR部門員工數。</p><pre>SELECT COUNT(*) AS hr_count FROM employees WHERE department = 'HR';</pre><table><tr><th>hr_count</th></tr><tr><td>10</td></tr></table><h4>Oracle</h4><p>計算有效訂單數。</p><pre>SELECT COUNT(*) AS order_count FROM orders WHERE status = 'Active';</pre><table><tr><th>order_count</th></tr><tr><td>20</td></tr></table><h3>結構</h3><pre>employees\n+------------+---------+\n| id         | INT     |\n| department | VARCHAR |\n+------------+---------+</pre>"
    },
    {
        "id": "sql_max",
        "title": "SQL 最大值 - 查找最大值",
        "content": "<h3>語法</h3><p>MAX 查找欄位最大值。</p><pre>SELECT MAX(column) FROM table;</pre><h3>範例</h3><h4>一般</h4><p>查找最高薪資。</p><pre>SELECT MAX(salary) AS max_salary FROM employees;</pre><table><tr><th>max_salary</th></tr><tr><td>60000.00</td></tr></table><h4>MySQL</h4><p>查找IT部門最高薪資。</p><pre>SELECT MAX(salary) AS max_it_salary FROM employees WHERE department = 'IT';</pre><table><tr><th>max_it_salary</th></tr><tr><td>60000.00</td></tr></table><h4>Oracle</h4><p>查找最大訂單金額。</p><pre>SELECT MAX(amount) AS max_amount FROM orders;</pre><table><tr><th>max_amount</th></tr><tr><td>5000.00</td></tr></table><h3>結構</h3><pre>employees\n+------------+---------+\n| id         | INT     |\n| salary     | DECIMAL |\n| department | VARCHAR |\n+------------+---------+</pre>"
    },
    {
        "id": "sql_min",
        "title": "SQL 最小值 - 查找最小值",
        "content": "<h3>語法</h3><p>MIN 查找欄位最小值。</p><pre>SELECT MIN(column) FROM table;</pre><h3>範例</h3><h4>一般</h4><p>查找最低薪資。</p><pre>SELECT MIN(salary) AS min_salary FROM employees;</pre><table><tr><th>min_salary</th></tr><tr><td>40000.00</td></tr></table><h4>MySQL</h4><p>查找HR部門最低薪資。</p><pre>SELECT MIN(salary) AS min_hr_salary FROM employees WHERE department = 'HR';</pre><table><tr><th>min_hr_salary</th></tr><tr><td>45000.00</td></tr></table><h4>Oracle</h4><p>查找最小訂單金額。</p><pre>SELECT MIN(amount) AS min_amount FROM orders;</pre><table><tr><th>min_amount</th></tr><tr><td>1000.00</td></tr></table><h3>結構</h3><pre>employees\n+------------+---------+\n| id         | INT     |\n| salary     | DECIMAL |\n| department | VARCHAR |\n+------------+---------+</pre>"
    },
    {
        "id": "sql_sum",
        "title": "SQL 總合 - 計算總和",
        "content": "<h3>語法</h3><p>SUM 計算數值欄位總和。</p><pre>SELECT SUM(column) FROM table;</pre><h3>範例</h3><h4>一般</h4><p>計算員工薪資總和。</p><pre>SELECT SUM(salary) AS total_salary FROM employees;</pre><table><tr><th>total_salary</th></tr><tr><td>2750000.00</td></tr></table><h4>MySQL</h4><p>計算IT部門薪資總和。</p><pre>SELECT SUM(salary) AS total_it_salary FROM employees WHERE department = 'IT';</pre><table><tr><th>total_it_salary</th></tr><tr><td>600000.00</td></tr></table><h4>Oracle</h4><p>計算訂單總金額。</p><pre>SELECT SUM(amount) AS total_amount FROM orders;</pre><table><tr><th>total_amount</th></tr><tr><td>100000.00</td></tr></table><h3>結構</h3><pre>employees\n+------------+---------+\n| id         | INT     |\n| salary     | DECIMAL |\n| department | VARCHAR |\n+------------+---------+</pre>"
    },
    {
        "id": "sql_group_by",
        "title": "SQL GROUP BY - 分組資料",
        "content": "<h3>語法</h3><p>GROUP BY 按欄位分組，與聚合函數搭配。</p><pre>SELECT column, AGGREGATE(column2) FROM table GROUP BY column;</pre><h3>範例</h3><h4>一般</h4><p>按部門計算平均薪資。</p><pre>SELECT department, AVG(salary) AS avg_salary FROM employees GROUP BY department;</pre><table><tr><th>department</th><th>avg_salary</th></tr><tr><td>HR</td><td>50000.00</td></tr><tr><td>IT</td><td>60000.00</td></tr></table><h4>MySQL</h4><p>按職位計算人數。</p><pre>SELECT job_title, COUNT(*) AS count FROM employees GROUP BY job_title;</pre><table><tr><th>job_title</th><th>count</th></tr><tr><td>Manager</td><td>5</td></tr><tr><td>Developer</td><td>10</td></tr></table><h4>Oracle</h4><p>按年份計算訂單總額。</p><pre>SELECT TO_CHAR(order_date, 'YYYY') AS year, SUM(amount) AS total FROM orders GROUP BY TO_CHAR(order_date, 'YYYY');</pre><table><tr><th>year</th><th>total</th></tr><tr><td>2023</td><td>50000.00</td></tr></table><h3>結構</h3><pre>employees\n+------------+---------+\n| id         | INT     |\n| department | VARCHAR |\n| job_title  | VARCHAR |\n| salary     | DECIMAL |\n+------------+---------+</pre>"
    },
    {
        "id": "sql_having",
        "title": "SQL HAVING - 篩選分組",
        "content": "<h3>語法</h3><p>HAVING 篩選 GROUP BY 結果。</p><pre>SELECT column, AGGREGATE(column2) FROM table GROUP BY column HAVING condition;</pre><h3>範例</h3><h4>一般</h4><p>查詢平均薪資大於55000的部門。</p><pre>SELECT department, AVG(salary) AS avg_salary FROM employees GROUP BY department HAVING AVG(salary) > 55000;</pre><table><tr><th>department</th><th>avg_salary</th></tr><tr><td>IT</td><td>60000.00</td></tr></table><h4>MySQL</h4><p>查詢人數大於5的職位。</p><pre>SELECT job_title, COUNT(*) AS count FROM employees GROUP BY job_title HAVING COUNT(*) > 5;</pre><table><tr><th>job_title</th><th>count</th></tr><tr><td>Developer</td><td>10</td></tr></table><h4>Oracle</h4><p>查詢訂單總額大於10000的年份。</p><pre>SELECT TO_CHAR(order_date, 'YYYY') AS year, SUM(amount) AS total FROM orders GROUP BY TO_CHAR(order_date, 'YYYY') HAVING SUM(amount) > 10000;</pre><table><tr><th>year</th><th>total</th></tr><tr><td>2023</td><td>50000.00</td></tr></table><h3>結構</h3><pre>employees\n+------------+---------+\n| id         | INT     |\n| department | VARCHAR |\n| job_title  | VARCHAR |\n| salary     | DECIMAL |\n+------------+---------+</pre>"
    },
    {
        "id": "sql_alias",
        "title": "SQL 別名 - 欄位或表別名",
        "content": "<h3>語法</h3><p>別名（AS）為欄位或表指定臨時名稱。</p><pre>SELECT column AS alias_name FROM table;</pre><h3>範例</h3><h4>一般</h4><p>為薪資取別名。</p><pre>SELECT salary AS employee_salary FROM employees;</pre><table><tr><th>employee_salary</th></tr><tr><td>55000.00</td></tr></table><h4>MySQL</h4><p>為表取別名並查詢。</p><pre>SELECT e.name AS emp_name FROM employees AS e WHERE e.department = 'HR';</pre><table><tr><th>emp_name</th></tr><tr><td>張三</td></tr></table><h4>Oracle</h4><p>為計算欄位取別名。</p><pre>SELECT COUNT(*) AS order_count FROM orders AS o;</pre><table><tr><th>order_count</th></tr><tr><td>100</td></tr></table><h3>結構</h3><pre>employees\n+------------+---------+\n| id         | INT     |\n| name       | VARCHAR |\n| salary     | DECIMAL |\n| department | VARCHAR |\n+------------+---------+</pre>"
    },
    {
        "id": "sql_as",
        "title": "SQL AS - 指定別名",
        "content": "<h3>語法</h3><p>AS 為欄位、表或子查詢指定別名。</p><pre>SELECT column AS alias_name FROM table;</pre><h3>範例</h3><h4>一般</h4><p>為部門名稱取別名。</p><pre>SELECT department AS dept_name FROM employees;</pre><table><tr><th>dept_name</th></tr><tr><td>HR</td></tr><tr><td>IT</td></tr></table><h4>MySQL</h4><p>為計算欄位取別名，查詢員工總數。</p><pre>SELECT COUNT(*) AS emp_count FROM employees AS e;</pre><table><tr><th>emp_count</th></tr><tr><td>50</td></tr></table><h4>Oracle</h4><p>為子查詢取別名，查詢部門名稱。</p><pre>SELECT dept_name FROM (SELECT department AS dept_name FROM employees) AS dept;</pre><table><tr><th>dept_name</th></tr><tr><td>HR</td></tr><tr><td>IT</td></tr></table><h3>結構</h3><pre>employees\n+------------+---------+\n| id         | INT     |\n| department | VARCHAR |\n+------------+---------+</pre>"
    },
    {
        "id": "sql_join",
        "title": "SQL 表格連接 - 合併多表資料",
        "content": "<h3>語法</h3><p>JOIN 合併多個表的資料，通常使用 INNER JOIN 來匹配條件。</p><pre>SELECT table1.column1, table2.column2 \nFROM table1 \nINNER JOIN table2 ON table1.key = table2.key;</pre><h3>範例</h3><h4>一般</h4><p>查詢員工及其部門名稱。</p><pre>SELECT e.name, d.dept_name \nFROM employees e \nINNER JOIN departments d ON e.dept_id = d.dept_id;</pre><table><tr><th>name</th><th>dept_name</th></tr><tr><td>張三</td><td>HR</td></tr><tr><td>趙六</td><td>IT</td></tr></table><h4>MySQL</h4><p>查詢訂單及其客戶名稱。</p><pre>SELECT o.order_id, c.name \nFROM orders o \nINNER JOIN customers c ON o.cust_id = c.id;</pre><table><tr><th>order_id</th><th>name</th></tr><tr><td>101</td><td>林八</td></tr><tr><td>102</td><td>陳七</td></tr></table><h4>Oracle</h4><p>查詢員工及其主管名稱。</p><pre>SELECT e1.name AS employee, e2.name AS manager \nFROM employees e1 \nINNER JOIN employees e2 ON e1.manager_id = e2.id;</pre><table><tr><